/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AbstractJsonSchemaPropertyObject
 */
export interface AbstractJsonSchemaPropertyObject {
    /**
     * 
     * @type {string}
     * @memberof AbstractJsonSchemaPropertyObject
     */
    'title'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AbstractJsonSchemaPropertyObject
     */
    'readOnly'?: boolean;
}
/**
 * 
 * @export
 * @interface EntityModelExampleModel
 */
export interface EntityModelExampleModel {
    /**
     * 
     * @type {string}
     * @memberof EntityModelExampleModel
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityModelExampleModel
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityModelExampleModel
     */
    'phone'?: string;
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof EntityModelExampleModel
     */
    '_links'?: { [key: string]: Link; };
}
/**
 * 
 * @export
 * @interface ExampleModel
 */
export interface ExampleModel {
    /**
     * 
     * @type {string}
     * @memberof ExampleModel
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExampleModel
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExampleModel
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExampleModel
     */
    'phone'?: string;
}
/**
 * 
 * @export
 * @interface ExampleModelRequestBody
 */
export interface ExampleModelRequestBody {
    /**
     * 
     * @type {string}
     * @memberof ExampleModelRequestBody
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExampleModelRequestBody
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExampleModelRequestBody
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExampleModelRequestBody
     */
    'phone'?: string;
}
/**
 * 
 * @export
 * @interface Item
 */
export interface Item {
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    'type'?: string;
    /**
     * 
     * @type {{ [key: string]: AbstractJsonSchemaPropertyObject; }}
     * @memberof Item
     */
    'properties'?: { [key: string]: AbstractJsonSchemaPropertyObject; };
    /**
     * 
     * @type {Array<string>}
     * @memberof Item
     */
    'requiredProperties'?: Array<string>;
}
/**
 * 
 * @export
 * @interface JsonSchema
 */
export interface JsonSchema {
    /**
     * 
     * @type {string}
     * @memberof JsonSchema
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof JsonSchema
     */
    'description'?: string;
    /**
     * 
     * @type {{ [key: string]: AbstractJsonSchemaPropertyObject; }}
     * @memberof JsonSchema
     */
    'properties'?: { [key: string]: AbstractJsonSchemaPropertyObject; };
    /**
     * 
     * @type {Array<string>}
     * @memberof JsonSchema
     */
    'requiredProperties'?: Array<string>;
    /**
     * 
     * @type {{ [key: string]: Item; }}
     * @memberof JsonSchema
     */
    'definitions'?: { [key: string]: Item; };
    /**
     * 
     * @type {string}
     * @memberof JsonSchema
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof JsonSchema
     */
    '$schema'?: string;
}
/**
 * 
 * @export
 * @interface Link
 */
export interface Link {
    /**
     * 
     * @type {string}
     * @memberof Link
     */
    'href'?: string;
    /**
     * 
     * @type {string}
     * @memberof Link
     */
    'hreflang'?: string;
    /**
     * 
     * @type {string}
     * @memberof Link
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof Link
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof Link
     */
    'deprecation'?: string;
    /**
     * 
     * @type {string}
     * @memberof Link
     */
    'profile'?: string;
    /**
     * 
     * @type {string}
     * @memberof Link
     */
    'name'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Link
     */
    'templated'?: boolean;
}
/**
 * 
 * @export
 * @interface PageMetadata
 */
export interface PageMetadata {
    /**
     * 
     * @type {number}
     * @memberof PageMetadata
     */
    'size'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageMetadata
     */
    'totalElements'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageMetadata
     */
    'totalPages'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageMetadata
     */
    'number'?: number;
}
/**
 * 
 * @export
 * @interface PagedModelEntityModelExampleModel
 */
export interface PagedModelEntityModelExampleModel {
    /**
     * 
     * @type {PagedModelEntityModelExampleModelEmbedded}
     * @memberof PagedModelEntityModelExampleModel
     */
    '_embedded'?: PagedModelEntityModelExampleModelEmbedded;
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof PagedModelEntityModelExampleModel
     */
    '_links'?: { [key: string]: Link; };
    /**
     * 
     * @type {PageMetadata}
     * @memberof PagedModelEntityModelExampleModel
     */
    'page'?: PageMetadata;
}
/**
 * 
 * @export
 * @interface PagedModelEntityModelExampleModelEmbedded
 */
export interface PagedModelEntityModelExampleModelEmbedded {
    /**
     * 
     * @type {Array<EntityModelExampleModel>}
     * @memberof PagedModelEntityModelExampleModelEmbedded
     */
    'exampleModels'?: Array<EntityModelExampleModel>;
}
/**
 * 
 * @export
 * @interface RepresentationModelObject
 */
export interface RepresentationModelObject {
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof RepresentationModelObject
     */
    '_links'?: { [key: string]: Link; };
}

/**
 * ExampleModelControllerApi - axios parameter creator
 * @export
 */
export const ExampleModelControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ExampleModel} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (model: ExampleModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'model' is not null or undefined
            assertParamExists('create', 'model', model)
            const localVarPath = `/api/example/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (model !== undefined) {
                localVarQueryParameter['model'] = model;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/example`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('findById', 'id', id)
            const localVarPath = `/api/example/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExampleModelControllerApi - functional programming interface
 * @export
 */
export const ExampleModelControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExampleModelControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ExampleModel} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(model: ExampleModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExampleModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(model, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ExampleModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAll(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExampleModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ExampleModelControllerApi - factory interface
 * @export
 */
export const ExampleModelControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExampleModelControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {ExampleModel} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(model: ExampleModel, options?: any): AxiosPromise<ExampleModel> {
            return localVarFp.create(model, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAll(options?: any): AxiosPromise<Array<ExampleModel>> {
            return localVarFp.findAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findById(id: string, options?: any): AxiosPromise<ExampleModel> {
            return localVarFp.findById(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExampleModelControllerApi - object-oriented interface
 * @export
 * @class ExampleModelControllerApi
 * @extends {BaseAPI}
 */
export class ExampleModelControllerApi extends BaseAPI {
    /**
     * 
     * @param {ExampleModel} model 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExampleModelControllerApi
     */
    public create(model: ExampleModel, options?: AxiosRequestConfig) {
        return ExampleModelControllerApiFp(this.configuration).create(model, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExampleModelControllerApi
     */
    public findAll(options?: AxiosRequestConfig) {
        return ExampleModelControllerApiFp(this.configuration).findAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExampleModelControllerApi
     */
    public findById(id: string, options?: AxiosRequestConfig) {
        return ExampleModelControllerApiFp(this.configuration).findById(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ExampleModelEntityControllerApi - axios parameter creator
 * @export
 */
export const ExampleModelEntityControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * delete-examplemodel
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemResourceExamplemodelDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteItemResourceExamplemodelDelete', 'id', id)
            const localVarPath = `/exampleModels/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-examplemodel
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionResourceExamplemodelGet1: async (page?: number, size?: number, sort?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/exampleModels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-examplemodel
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemResourceExamplemodelGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getItemResourceExamplemodelGet', 'id', id)
            const localVarPath = `/exampleModels/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * patch-examplemodel
         * @param {string} id 
         * @param {ExampleModelRequestBody} exampleModelRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchItemResourceExamplemodelPatch: async (id: string, exampleModelRequestBody: ExampleModelRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchItemResourceExamplemodelPatch', 'id', id)
            // verify required parameter 'exampleModelRequestBody' is not null or undefined
            assertParamExists('patchItemResourceExamplemodelPatch', 'exampleModelRequestBody', exampleModelRequestBody)
            const localVarPath = `/exampleModels/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(exampleModelRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * create-examplemodel
         * @param {ExampleModelRequestBody} exampleModelRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCollectionResourceExamplemodelPost: async (exampleModelRequestBody: ExampleModelRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'exampleModelRequestBody' is not null or undefined
            assertParamExists('postCollectionResourceExamplemodelPost', 'exampleModelRequestBody', exampleModelRequestBody)
            const localVarPath = `/exampleModels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(exampleModelRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update-examplemodel
         * @param {string} id 
         * @param {ExampleModelRequestBody} exampleModelRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putItemResourceExamplemodelPut: async (id: string, exampleModelRequestBody: ExampleModelRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putItemResourceExamplemodelPut', 'id', id)
            // verify required parameter 'exampleModelRequestBody' is not null or undefined
            assertParamExists('putItemResourceExamplemodelPut', 'exampleModelRequestBody', exampleModelRequestBody)
            const localVarPath = `/exampleModels/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(exampleModelRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExampleModelEntityControllerApi - functional programming interface
 * @export
 */
export const ExampleModelEntityControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExampleModelEntityControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * delete-examplemodel
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteItemResourceExamplemodelDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteItemResourceExamplemodelDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * get-examplemodel
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCollectionResourceExamplemodelGet1(page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedModelEntityModelExampleModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCollectionResourceExamplemodelGet1(page, size, sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * get-examplemodel
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemResourceExamplemodelGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelExampleModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItemResourceExamplemodelGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * patch-examplemodel
         * @param {string} id 
         * @param {ExampleModelRequestBody} exampleModelRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchItemResourceExamplemodelPatch(id: string, exampleModelRequestBody: ExampleModelRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelExampleModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchItemResourceExamplemodelPatch(id, exampleModelRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * create-examplemodel
         * @param {ExampleModelRequestBody} exampleModelRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCollectionResourceExamplemodelPost(exampleModelRequestBody: ExampleModelRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelExampleModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCollectionResourceExamplemodelPost(exampleModelRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * update-examplemodel
         * @param {string} id 
         * @param {ExampleModelRequestBody} exampleModelRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putItemResourceExamplemodelPut(id: string, exampleModelRequestBody: ExampleModelRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelExampleModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putItemResourceExamplemodelPut(id, exampleModelRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ExampleModelEntityControllerApi - factory interface
 * @export
 */
export const ExampleModelEntityControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExampleModelEntityControllerApiFp(configuration)
    return {
        /**
         * delete-examplemodel
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemResourceExamplemodelDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteItemResourceExamplemodelDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * get-examplemodel
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionResourceExamplemodelGet1(page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<PagedModelEntityModelExampleModel> {
            return localVarFp.getCollectionResourceExamplemodelGet1(page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * get-examplemodel
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemResourceExamplemodelGet(id: string, options?: any): AxiosPromise<EntityModelExampleModel> {
            return localVarFp.getItemResourceExamplemodelGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * patch-examplemodel
         * @param {string} id 
         * @param {ExampleModelRequestBody} exampleModelRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchItemResourceExamplemodelPatch(id: string, exampleModelRequestBody: ExampleModelRequestBody, options?: any): AxiosPromise<EntityModelExampleModel> {
            return localVarFp.patchItemResourceExamplemodelPatch(id, exampleModelRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * create-examplemodel
         * @param {ExampleModelRequestBody} exampleModelRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCollectionResourceExamplemodelPost(exampleModelRequestBody: ExampleModelRequestBody, options?: any): AxiosPromise<EntityModelExampleModel> {
            return localVarFp.postCollectionResourceExamplemodelPost(exampleModelRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * update-examplemodel
         * @param {string} id 
         * @param {ExampleModelRequestBody} exampleModelRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putItemResourceExamplemodelPut(id: string, exampleModelRequestBody: ExampleModelRequestBody, options?: any): AxiosPromise<EntityModelExampleModel> {
            return localVarFp.putItemResourceExamplemodelPut(id, exampleModelRequestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExampleModelEntityControllerApi - object-oriented interface
 * @export
 * @class ExampleModelEntityControllerApi
 * @extends {BaseAPI}
 */
export class ExampleModelEntityControllerApi extends BaseAPI {
    /**
     * delete-examplemodel
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExampleModelEntityControllerApi
     */
    public deleteItemResourceExamplemodelDelete(id: string, options?: AxiosRequestConfig) {
        return ExampleModelEntityControllerApiFp(this.configuration).deleteItemResourceExamplemodelDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-examplemodel
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExampleModelEntityControllerApi
     */
    public getCollectionResourceExamplemodelGet1(page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig) {
        return ExampleModelEntityControllerApiFp(this.configuration).getCollectionResourceExamplemodelGet1(page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-examplemodel
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExampleModelEntityControllerApi
     */
    public getItemResourceExamplemodelGet(id: string, options?: AxiosRequestConfig) {
        return ExampleModelEntityControllerApiFp(this.configuration).getItemResourceExamplemodelGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * patch-examplemodel
     * @param {string} id 
     * @param {ExampleModelRequestBody} exampleModelRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExampleModelEntityControllerApi
     */
    public patchItemResourceExamplemodelPatch(id: string, exampleModelRequestBody: ExampleModelRequestBody, options?: AxiosRequestConfig) {
        return ExampleModelEntityControllerApiFp(this.configuration).patchItemResourceExamplemodelPatch(id, exampleModelRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * create-examplemodel
     * @param {ExampleModelRequestBody} exampleModelRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExampleModelEntityControllerApi
     */
    public postCollectionResourceExamplemodelPost(exampleModelRequestBody: ExampleModelRequestBody, options?: AxiosRequestConfig) {
        return ExampleModelEntityControllerApiFp(this.configuration).postCollectionResourceExamplemodelPost(exampleModelRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update-examplemodel
     * @param {string} id 
     * @param {ExampleModelRequestBody} exampleModelRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExampleModelEntityControllerApi
     */
    public putItemResourceExamplemodelPut(id: string, exampleModelRequestBody: ExampleModelRequestBody, options?: AxiosRequestConfig) {
        return ExampleModelEntityControllerApiFp(this.configuration).putItemResourceExamplemodelPut(id, exampleModelRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProfileControllerApi - axios parameter creator
 * @export
 */
export const ProfileControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        descriptor111: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/profile/exampleModels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllFormsOfMetadata1: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProfileControllerApi - functional programming interface
 * @export
 */
export const ProfileControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProfileControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async descriptor111(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.descriptor111(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllFormsOfMetadata1(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RepresentationModelObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllFormsOfMetadata1(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProfileControllerApi - factory interface
 * @export
 */
export const ProfileControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProfileControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        descriptor111(options?: any): AxiosPromise<string> {
            return localVarFp.descriptor111(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllFormsOfMetadata1(options?: any): AxiosPromise<RepresentationModelObject> {
            return localVarFp.listAllFormsOfMetadata1(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProfileControllerApi - object-oriented interface
 * @export
 * @class ProfileControllerApi
 * @extends {BaseAPI}
 */
export class ProfileControllerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileControllerApi
     */
    public descriptor111(options?: AxiosRequestConfig) {
        return ProfileControllerApiFp(this.configuration).descriptor111(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileControllerApi
     */
    public listAllFormsOfMetadata1(options?: AxiosRequestConfig) {
        return ProfileControllerApiFp(this.configuration).listAllFormsOfMetadata1(options).then((request) => request(this.axios, this.basePath));
    }
}


